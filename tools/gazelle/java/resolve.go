package java

import (
	"log"
	"strings"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

// Resolver satisfies the resolve.Resolver interface. It resolves dependencies
// in rules generated by this extension.
type Resolver struct{}

// Name returns the name of the language. This should be a prefix of the
// kinds of rules generated by the language, e.g., "go" for the Go extension
// since it generates "go_library" rules.
func (*Resolver) Name() string {
	return JavaName
}

// Imports returns a list of ImportSpecs that can be used to import the rule
// r. This is used to populate RuleIndex.
//
// If nil is returned, the rule will not be indexed. If any non-nil slice is
// returned, including an empty slice, the rule will be indexed.
//
// NOTE(jacob): This is a dead simple implementation currently. Assumptions made:
//		- we have no packages split across build targets
//		- package structure matches directory structure, ignoring the top-level module name
//			and source tree prefix
//		- targets only contain sources in their immediate directory, no sub-directories
func (*Resolver) Imports(
	c *config.Config,
	r *rule.Rule,
	f *rule.File,
) []resolve.ImportSpec {
	cfg := c.Exts[JavaName].(JavaConfig)
	sourceTreePrefix := cfg.SourceTreePrefix
	packageStartIndex := strings.Index(f.Pkg, sourceTreePrefix) + len(sourceTreePrefix)
	javaPackage := strings.ReplaceAll(f.Pkg[packageStartIndex:], "/", ".")
	log.Printf(javaPackage)

	return []resolve.ImportSpec{
		resolve.ImportSpec{
			Lang: JavaName,
			Imp: javaPackage,
		},
	}
}

// Embeds returns a list of labels of rules that the given rule embeds. If
// a rule is embedded by another importable rule of the same language, only
// the embedding rule will be indexed. The embedding rule will inherit
// the imports of the embedded rule.
func (*Resolver) Embeds(r *rule.Rule, from label.Label) []label.Label {
	return make([]label.Label, 0)
}

// Resolve translates imported libraries for a given rule into Bazel
// dependencies. Information about imported libraries is returned for each
// rule generated by language.GenerateRules in
// language.GenerateResult.Imports. Resolve generates a "deps" attribute (or
// the appropriate language-specific equivalent) for each import according to
// language-specific rules and heuristics.
func (*Resolver) Resolve(
	c *config.Config,
	ix *resolve.RuleIndex,
	rc *repo.RemoteCache,
	r *rule.Rule,
	imports interface{},
	from label.Label,
) {

}
